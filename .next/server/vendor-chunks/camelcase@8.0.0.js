"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/camelcase@8.0.0";
exports.ids = ["vendor-chunks/camelcase@8.0.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/camelcase@8.0.0/node_modules/camelcase/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/camelcase@8.0.0/node_modules/camelcase/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ camelCase)\n/* harmony export */ });\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase, preserveConsecutiveUppercase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\tlet isLastLastCharPreserved = false;\n\n\tfor (let index = 0; index < string.length; index++) {\n\t\tconst character = string[index];\n\t\tisLastLastCharPreserved = index > 2 ? string[index - 3] === '-' : true;\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, index) + '-' + string.slice(index);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\tindex++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character) && (!isLastLastCharPreserved || preserveConsecutiveUppercase)) {\n\t\t\tstring = string.slice(0, index - 1) + '-' + string.slice(index - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replaceAll(LEADING_CAPITAL, match => toLowerCase(match));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input\n\t\t.replaceAll(NUMBERS_AND_IDENTIFIER, (match, pattern, offset) => ['_', '-'].includes(input.charAt(offset + match.length)) ? match : toUpperCase(match))\n\t\t.replaceAll(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier));\n};\n\nfunction camelCase(input, options) {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options,\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false\n\t\t? string => string.toLowerCase()\n\t\t: string => string.toLocaleLowerCase(options.locale);\n\n\tconst toUpperCase = options.locale === false\n\t\t? string => string.toUpperCase()\n\t\t: string => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\tif (SEPARATORS.test(input)) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase, options.preserveConsecutiveUppercase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\tinput = options.preserveConsecutiveUppercase ? preserveConsecutiveUppercase(input, toLowerCase) : toLowerCase(input);\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vY2FtZWxjYXNlQDguMC4wL25vZGVfbW9kdWxlcy9jYW1lbGNhc2UvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHVCQUF1QixHQUFHO0FBQzFCLHVCQUF1QixHQUFHO0FBQzFCLDhCQUE4QixHQUFHLFFBQVEsR0FBRztBQUM1Qyx5QkFBeUIsTUFBTSxHQUFHLEVBQUU7QUFDcEM7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLHVCQUF1QjtBQUM1QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZTtBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3ZvaWNlLWFzc2lzdGFudDIvLi9ub2RlX21vZHVsZXMvLnBucG0vY2FtZWxjYXNlQDguMC4wL25vZGVfbW9kdWxlcy9jYW1lbGNhc2UvaW5kZXguanM/MmVlMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBVUFBFUkNBU0UgPSAvW1xccHtMdX1dL3U7XG5jb25zdCBMT1dFUkNBU0UgPSAvW1xccHtMbH1dL3U7XG5jb25zdCBMRUFESU5HX0NBUElUQUwgPSAvXltcXHB7THV9XSg/IVtcXHB7THV9XSkvZ3U7XG5jb25zdCBJREVOVElGSUVSID0gLyhbXFxwe0FscGhhfVxccHtOfV9dfCQpL3U7XG5jb25zdCBTRVBBUkFUT1JTID0gL1tfLlxcLSBdKy87XG5cbmNvbnN0IExFQURJTkdfU0VQQVJBVE9SUyA9IG5ldyBSZWdFeHAoJ14nICsgU0VQQVJBVE9SUy5zb3VyY2UpO1xuY29uc3QgU0VQQVJBVE9SU19BTkRfSURFTlRJRklFUiA9IG5ldyBSZWdFeHAoU0VQQVJBVE9SUy5zb3VyY2UgKyBJREVOVElGSUVSLnNvdXJjZSwgJ2d1Jyk7XG5jb25zdCBOVU1CRVJTX0FORF9JREVOVElGSUVSID0gbmV3IFJlZ0V4cCgnXFxcXGQrJyArIElERU5USUZJRVIuc291cmNlLCAnZ3UnKTtcblxuY29uc3QgcHJlc2VydmVDYW1lbENhc2UgPSAoc3RyaW5nLCB0b0xvd2VyQ2FzZSwgdG9VcHBlckNhc2UsIHByZXNlcnZlQ29uc2VjdXRpdmVVcHBlcmNhc2UpID0+IHtcblx0bGV0IGlzTGFzdENoYXJMb3dlciA9IGZhbHNlO1xuXHRsZXQgaXNMYXN0Q2hhclVwcGVyID0gZmFsc2U7XG5cdGxldCBpc0xhc3RMYXN0Q2hhclVwcGVyID0gZmFsc2U7XG5cdGxldCBpc0xhc3RMYXN0Q2hhclByZXNlcnZlZCA9IGZhbHNlO1xuXG5cdGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzdHJpbmcubGVuZ3RoOyBpbmRleCsrKSB7XG5cdFx0Y29uc3QgY2hhcmFjdGVyID0gc3RyaW5nW2luZGV4XTtcblx0XHRpc0xhc3RMYXN0Q2hhclByZXNlcnZlZCA9IGluZGV4ID4gMiA/IHN0cmluZ1tpbmRleCAtIDNdID09PSAnLScgOiB0cnVlO1xuXG5cdFx0aWYgKGlzTGFzdENoYXJMb3dlciAmJiBVUFBFUkNBU0UudGVzdChjaGFyYWN0ZXIpKSB7XG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgaW5kZXgpICsgJy0nICsgc3RyaW5nLnNsaWNlKGluZGV4KTtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IGZhbHNlO1xuXHRcdFx0aXNMYXN0TGFzdENoYXJVcHBlciA9IGlzTGFzdENoYXJVcHBlcjtcblx0XHRcdGlzTGFzdENoYXJVcHBlciA9IHRydWU7XG5cdFx0XHRpbmRleCsrO1xuXHRcdH0gZWxzZSBpZiAoaXNMYXN0Q2hhclVwcGVyICYmIGlzTGFzdExhc3RDaGFyVXBwZXIgJiYgTE9XRVJDQVNFLnRlc3QoY2hhcmFjdGVyKSAmJiAoIWlzTGFzdExhc3RDaGFyUHJlc2VydmVkIHx8IHByZXNlcnZlQ29uc2VjdXRpdmVVcHBlcmNhc2UpKSB7XG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgaW5kZXggLSAxKSArICctJyArIHN0cmluZy5zbGljZShpbmRleCAtIDEpO1xuXHRcdFx0aXNMYXN0TGFzdENoYXJVcHBlciA9IGlzTGFzdENoYXJVcHBlcjtcblx0XHRcdGlzTGFzdENoYXJVcHBlciA9IGZhbHNlO1xuXHRcdFx0aXNMYXN0Q2hhckxvd2VyID0gdHJ1ZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aXNMYXN0Q2hhckxvd2VyID0gdG9Mb3dlckNhc2UoY2hhcmFjdGVyKSA9PT0gY2hhcmFjdGVyICYmIHRvVXBwZXJDYXNlKGNoYXJhY3RlcikgIT09IGNoYXJhY3Rlcjtcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSB0b1VwcGVyQ2FzZShjaGFyYWN0ZXIpID09PSBjaGFyYWN0ZXIgJiYgdG9Mb3dlckNhc2UoY2hhcmFjdGVyKSAhPT0gY2hhcmFjdGVyO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHJpbmc7XG59O1xuXG5jb25zdCBwcmVzZXJ2ZUNvbnNlY3V0aXZlVXBwZXJjYXNlID0gKGlucHV0LCB0b0xvd2VyQ2FzZSkgPT4ge1xuXHRMRUFESU5HX0NBUElUQUwubGFzdEluZGV4ID0gMDtcblxuXHRyZXR1cm4gaW5wdXQucmVwbGFjZUFsbChMRUFESU5HX0NBUElUQUwsIG1hdGNoID0+IHRvTG93ZXJDYXNlKG1hdGNoKSk7XG59O1xuXG5jb25zdCBwb3N0UHJvY2VzcyA9IChpbnB1dCwgdG9VcHBlckNhc2UpID0+IHtcblx0U0VQQVJBVE9SU19BTkRfSURFTlRJRklFUi5sYXN0SW5kZXggPSAwO1xuXHROVU1CRVJTX0FORF9JREVOVElGSUVSLmxhc3RJbmRleCA9IDA7XG5cblx0cmV0dXJuIGlucHV0XG5cdFx0LnJlcGxhY2VBbGwoTlVNQkVSU19BTkRfSURFTlRJRklFUiwgKG1hdGNoLCBwYXR0ZXJuLCBvZmZzZXQpID0+IFsnXycsICctJ10uaW5jbHVkZXMoaW5wdXQuY2hhckF0KG9mZnNldCArIG1hdGNoLmxlbmd0aCkpID8gbWF0Y2ggOiB0b1VwcGVyQ2FzZShtYXRjaCkpXG5cdFx0LnJlcGxhY2VBbGwoU0VQQVJBVE9SU19BTkRfSURFTlRJRklFUiwgKF8sIGlkZW50aWZpZXIpID0+IHRvVXBwZXJDYXNlKGlkZW50aWZpZXIpKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNhbWVsQ2FzZShpbnB1dCwgb3B0aW9ucykge1xuXHRpZiAoISh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoaW5wdXQpKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBpbnB1dCB0byBiZSBgc3RyaW5nIHwgc3RyaW5nW11gJyk7XG5cdH1cblxuXHRvcHRpb25zID0ge1xuXHRcdHBhc2NhbENhc2U6IGZhbHNlLFxuXHRcdHByZXNlcnZlQ29uc2VjdXRpdmVVcHBlcmNhc2U6IGZhbHNlLFxuXHRcdC4uLm9wdGlvbnMsXG5cdH07XG5cblx0aWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG5cdFx0aW5wdXQgPSBpbnB1dC5tYXAoeCA9PiB4LnRyaW0oKSlcblx0XHRcdC5maWx0ZXIoeCA9PiB4Lmxlbmd0aClcblx0XHRcdC5qb2luKCctJyk7XG5cdH0gZWxzZSB7XG5cdFx0aW5wdXQgPSBpbnB1dC50cmltKCk7XG5cdH1cblxuXHRpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0Y29uc3QgdG9Mb3dlckNhc2UgPSBvcHRpb25zLmxvY2FsZSA9PT0gZmFsc2Vcblx0XHQ/IHN0cmluZyA9PiBzdHJpbmcudG9Mb3dlckNhc2UoKVxuXHRcdDogc3RyaW5nID0+IHN0cmluZy50b0xvY2FsZUxvd2VyQ2FzZShvcHRpb25zLmxvY2FsZSk7XG5cblx0Y29uc3QgdG9VcHBlckNhc2UgPSBvcHRpb25zLmxvY2FsZSA9PT0gZmFsc2Vcblx0XHQ/IHN0cmluZyA9PiBzdHJpbmcudG9VcHBlckNhc2UoKVxuXHRcdDogc3RyaW5nID0+IHN0cmluZy50b0xvY2FsZVVwcGVyQ2FzZShvcHRpb25zLmxvY2FsZSk7XG5cblx0aWYgKGlucHV0Lmxlbmd0aCA9PT0gMSkge1xuXHRcdGlmIChTRVBBUkFUT1JTLnRlc3QoaW5wdXQpKSB7XG5cdFx0XHRyZXR1cm4gJyc7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9wdGlvbnMucGFzY2FsQ2FzZSA/IHRvVXBwZXJDYXNlKGlucHV0KSA6IHRvTG93ZXJDYXNlKGlucHV0KTtcblx0fVxuXG5cdGNvbnN0IGhhc1VwcGVyQ2FzZSA9IGlucHV0ICE9PSB0b0xvd2VyQ2FzZShpbnB1dCk7XG5cblx0aWYgKGhhc1VwcGVyQ2FzZSkge1xuXHRcdGlucHV0ID0gcHJlc2VydmVDYW1lbENhc2UoaW5wdXQsIHRvTG93ZXJDYXNlLCB0b1VwcGVyQ2FzZSwgb3B0aW9ucy5wcmVzZXJ2ZUNvbnNlY3V0aXZlVXBwZXJjYXNlKTtcblx0fVxuXG5cdGlucHV0ID0gaW5wdXQucmVwbGFjZShMRUFESU5HX1NFUEFSQVRPUlMsICcnKTtcblx0aW5wdXQgPSBvcHRpb25zLnByZXNlcnZlQ29uc2VjdXRpdmVVcHBlcmNhc2UgPyBwcmVzZXJ2ZUNvbnNlY3V0aXZlVXBwZXJjYXNlKGlucHV0LCB0b0xvd2VyQ2FzZSkgOiB0b0xvd2VyQ2FzZShpbnB1dCk7XG5cblx0aWYgKG9wdGlvbnMucGFzY2FsQ2FzZSkge1xuXHRcdGlucHV0ID0gdG9VcHBlckNhc2UoaW5wdXQuY2hhckF0KDApKSArIGlucHV0LnNsaWNlKDEpO1xuXHR9XG5cblx0cmV0dXJuIHBvc3RQcm9jZXNzKGlucHV0LCB0b1VwcGVyQ2FzZSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/camelcase@8.0.0/node_modules/camelcase/index.js\n");

/***/ })

};
;